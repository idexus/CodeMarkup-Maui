//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class ProgressBarExtension
    {
        public static T ProgressColor<T>(this T self,
            Microsoft.Maui.Graphics.Color progressColor)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            self.SetValue(Microsoft.Maui.Controls.ProgressBar.ProgressColorProperty, progressColor);
            return self;
        }
        
        public static T ProgressColor<T>(this T self, Func<PropertyContext<Microsoft.Maui.Graphics.Color>, IPropertyBuilder<Microsoft.Maui.Graphics.Color>> configure)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            var context = new PropertyContext<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.ProgressBar.ProgressColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> ProgressColor<T>(this SettersContext<T> self,
            Microsoft.Maui.Graphics.Color progressColor)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ProgressBar.ProgressColorProperty, Value = progressColor });
            return self;
        }
        
        public static SettersContext<T> ProgressColor<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<Microsoft.Maui.Graphics.Color>> configure)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            var context = new PropertySettersContext<Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.ProgressBar.ProgressColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateProgressColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            Microsoft.Maui.Graphics.Color fromValue = self.ProgressColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.ProgressColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateProgressColorTo", transform, callback, length, easing);
        }
        
        public static T Progress<T>(this T self,
            double progress)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            self.SetValue(Microsoft.Maui.Controls.ProgressBar.ProgressProperty, progress);
            return self;
        }
        
        public static T Progress<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.ProgressBar.ProgressProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> Progress<T>(this SettersContext<T> self,
            double progress)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ProgressBar.ProgressProperty, Value = progress });
            return self;
        }
        
        public static SettersContext<T> Progress<T>(this SettersContext<T> self, Func<PropertySettersContext<double>, IPropertySettersBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            var context = new PropertySettersContext<double>(self.XamlSetters, Microsoft.Maui.Controls.ProgressBar.ProgressProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateProgressTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.ProgressBar
        {
            double fromValue = self.Progress;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.Progress = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateProgressTo", transform, callback, length, easing);
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
