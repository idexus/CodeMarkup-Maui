//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class SwipeItemsExtension
    {
        public static T Mode<T>(this T self,
            Microsoft.Maui.SwipeMode mode)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            self.SetValue(Microsoft.Maui.Controls.SwipeItems.ModeProperty, mode);
            return self;
        }
        
        public static T Mode<T>(this T self, Func<PropertyContext<Microsoft.Maui.SwipeMode>, IPropertyBuilder<Microsoft.Maui.SwipeMode>> configure)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            var context = new PropertyContext<Microsoft.Maui.SwipeMode>(self, Microsoft.Maui.Controls.SwipeItems.ModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> Mode<T>(this SettersContext<T> self,
            Microsoft.Maui.SwipeMode mode)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeItems.ModeProperty, Value = mode });
            return self;
        }
        
        public static SettersContext<T> Mode<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.SwipeMode>, IPropertySettersBuilder<Microsoft.Maui.SwipeMode>> configure)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            var context = new PropertySettersContext<Microsoft.Maui.SwipeMode>(self.XamlSetters, Microsoft.Maui.Controls.SwipeItems.ModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T SwipeBehaviorOnInvoked<T>(this T self,
            Microsoft.Maui.SwipeBehaviorOnInvoked swipeBehaviorOnInvoked)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            self.SetValue(Microsoft.Maui.Controls.SwipeItems.SwipeBehaviorOnInvokedProperty, swipeBehaviorOnInvoked);
            return self;
        }
        
        public static T SwipeBehaviorOnInvoked<T>(this T self, Func<PropertyContext<Microsoft.Maui.SwipeBehaviorOnInvoked>, IPropertyBuilder<Microsoft.Maui.SwipeBehaviorOnInvoked>> configure)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            var context = new PropertyContext<Microsoft.Maui.SwipeBehaviorOnInvoked>(self, Microsoft.Maui.Controls.SwipeItems.SwipeBehaviorOnInvokedProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> SwipeBehaviorOnInvoked<T>(this SettersContext<T> self,
            Microsoft.Maui.SwipeBehaviorOnInvoked swipeBehaviorOnInvoked)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeItems.SwipeBehaviorOnInvokedProperty, Value = swipeBehaviorOnInvoked });
            return self;
        }
        
        public static SettersContext<T> SwipeBehaviorOnInvoked<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.SwipeBehaviorOnInvoked>, IPropertySettersBuilder<Microsoft.Maui.SwipeBehaviorOnInvoked>> configure)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            var context = new PropertySettersContext<Microsoft.Maui.SwipeBehaviorOnInvoked>(self.XamlSetters, Microsoft.Maui.Controls.SwipeItems.SwipeBehaviorOnInvokedProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnCollectionChanged<T>(this T self, System.Collections.Specialized.NotifyCollectionChangedEventHandler handler)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            self.CollectionChanged += handler;
            return self;
        }
        
        public static T OnCollectionChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeItems
        {
            self.CollectionChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
