//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class CellExtension
    {
        public static T ContextActions<T>(this T self,
            IList<Microsoft.Maui.Controls.MenuItem> contextActions)
            where T : Microsoft.Maui.Controls.Cell
        {
            foreach (var item in contextActions)
                self.ContextActions.Add(item);
            return self;
        }

        public static T ContextActions<T>(this T self,
            params Microsoft.Maui.Controls.MenuItem[] contextActions)
            where T : Microsoft.Maui.Controls.Cell
        {
            foreach (var item in contextActions)
                self.ContextActions.Add(item);
            return self;
        }
        
        public static T IsContextActionsLegacyModeEnabled<T>(this T self,
            bool isContextActionsLegacyModeEnabled)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.IsContextActionsLegacyModeEnabled = isContextActionsLegacyModeEnabled;
            return self;
        }
        
        public static T Height<T>(this T self,
            double height)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.Height = height;
            return self;
        }
        
        public static T IsEnabled<T>(this T self,
            bool isEnabled)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.SetValue(Microsoft.Maui.Controls.Cell.IsEnabledProperty, isEnabled);
            return self;
        }
        
        public static T IsEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.Cell
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.Cell.IsEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> IsEnabled<T>(this SettersContext<T> self,
            bool isEnabled)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Cell.IsEnabledProperty, Value = isEnabled });
            return self;
        }
        
        public static SettersContext<T> IsEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<bool>, IPropertySettersBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.Cell
        {
            var context = new PropertySettersContext<bool>(self.XamlSetters, Microsoft.Maui.Controls.Cell.IsEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnAppearing<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.Appearing += handler;
            return self;
        }
        
        public static T OnAppearing<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.Appearing += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDisappearing<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.Disappearing += handler;
            return self;
        }
        
        public static T OnDisappearing<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.Disappearing += (o, arg) => action(self);
            return self;
        }
        
        public static T OnForceUpdateSizeRequested<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.ForceUpdateSizeRequested += handler;
            return self;
        }
        
        public static T OnForceUpdateSizeRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.ForceUpdateSizeRequested += (o, arg) => action(self);
            return self;
        }
        
        public static T OnTapped<T>(this T self, System.EventHandler handler)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.Tapped += handler;
            return self;
        }
        
        public static T OnTapped<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Cell
        {
            self.Tapped += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
