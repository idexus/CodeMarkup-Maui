//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class SwipeGestureRecognizerExtension
    {
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Command(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            System.Windows.Input.ICommand command)
        {
            self.SetValue(Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty, command);
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Command(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, Func<PropertyContext<System.Windows.Input.ICommand>, IPropertyBuilder<System.Windows.Input.ICommand>> configure)
        {
            var context = new PropertyContext<System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Command(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self,
            System.Windows.Input.ICommand command)
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty, Value = command });
            return self;
        }
        
        public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Command(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self, Func<PropertySettersContext<System.Windows.Input.ICommand>, IPropertySettersBuilder<System.Windows.Input.ICommand>> configure)
        {
            var context = new PropertySettersContext<System.Windows.Input.ICommand>(self.XamlSetters, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            object commandParameter)
        {
            self.SetValue(Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty, commandParameter);
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, Func<PropertyContext<object>, IPropertyBuilder<object>> configure)
        {
            var context = new PropertyContext<object>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> CommandParameter(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self,
            object commandParameter)
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty, Value = commandParameter });
            return self;
        }
        
        public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> CommandParameter(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self, Func<PropertySettersContext<object>, IPropertySettersBuilder<object>> configure)
        {
            var context = new PropertySettersContext<object>(self.XamlSetters, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Direction(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            Microsoft.Maui.SwipeDirection direction)
        {
            self.SetValue(Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty, direction);
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Direction(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, Func<PropertyContext<Microsoft.Maui.SwipeDirection>, IPropertyBuilder<Microsoft.Maui.SwipeDirection>> configure)
        {
            var context = new PropertyContext<Microsoft.Maui.SwipeDirection>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Direction(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self,
            Microsoft.Maui.SwipeDirection direction)
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty, Value = direction });
            return self;
        }
        
        public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Direction(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self, Func<PropertySettersContext<Microsoft.Maui.SwipeDirection>, IPropertySettersBuilder<Microsoft.Maui.SwipeDirection>> configure)
        {
            var context = new PropertySettersContext<Microsoft.Maui.SwipeDirection>(self.XamlSetters, Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Threshold(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
            uint threshold)
        {
            self.SetValue(Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty, threshold);
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer Threshold(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, Func<PropertyContext<uint>, IPropertyBuilder<uint>> configure)
        {
            var context = new PropertyContext<uint>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Threshold(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self,
            uint threshold)
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty, Value = threshold });
            return self;
        }
        
        public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Threshold(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self, Func<PropertySettersContext<uint>, IPropertySettersBuilder<uint>> configure)
        {
            var context = new PropertySettersContext<uint>(self.XamlSetters, Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer OnSwiped(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.EventHandler<Microsoft.Maui.Controls.SwipedEventArgs> handler)
        {
            self.Swiped += handler;
            return self;
        }
        
        public static Microsoft.Maui.Controls.SwipeGestureRecognizer OnSwiped(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.Action<Microsoft.Maui.Controls.SwipeGestureRecognizer> action)
        {
            self.Swiped += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
