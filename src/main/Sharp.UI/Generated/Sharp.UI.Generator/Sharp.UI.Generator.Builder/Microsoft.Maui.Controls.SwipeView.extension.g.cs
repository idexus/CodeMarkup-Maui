//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class SwipeViewExtension
    {
        public static T Threshold<T>(this T self,
            double threshold)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SetValue(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, threshold);
            return self;
        }
        
        public static T Threshold<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.SwipeView.ThresholdProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> Threshold<T>(this SettersContext<T> self,
            double threshold)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeView.ThresholdProperty, Value = threshold });
            return self;
        }
        
        public static SettersContext<T> Threshold<T>(this SettersContext<T> self, Func<PropertySettersContext<double>, IPropertySettersBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var context = new PropertySettersContext<double>(self.XamlSetters, Microsoft.Maui.Controls.SwipeView.ThresholdProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateThresholdTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            double fromValue = self.Threshold;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.Threshold = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateThresholdTo", transform, callback, length, easing);
        }
        
        public static T LeftItems<T>(this T self,
            IList<Microsoft.Maui.Controls.ISwipeItem> leftItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in leftItems)
                self.LeftItems.Add(item);
            return self;
        }

        public static T LeftItems<T>(this T self,
            params Microsoft.Maui.Controls.ISwipeItem[] leftItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in leftItems)
                self.LeftItems.Add(item);
            return self;
        }
        
        public static T LeftItems<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.SwipeItems>, IPropertyBuilder<Microsoft.Maui.Controls.SwipeItems>> configure)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.LeftItemsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T RightItems<T>(this T self,
            IList<Microsoft.Maui.Controls.ISwipeItem> rightItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in rightItems)
                self.RightItems.Add(item);
            return self;
        }

        public static T RightItems<T>(this T self,
            params Microsoft.Maui.Controls.ISwipeItem[] rightItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in rightItems)
                self.RightItems.Add(item);
            return self;
        }
        
        public static T RightItems<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.SwipeItems>, IPropertyBuilder<Microsoft.Maui.Controls.SwipeItems>> configure)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.RightItemsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T TopItems<T>(this T self,
            IList<Microsoft.Maui.Controls.ISwipeItem> topItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in topItems)
                self.TopItems.Add(item);
            return self;
        }

        public static T TopItems<T>(this T self,
            params Microsoft.Maui.Controls.ISwipeItem[] topItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in topItems)
                self.TopItems.Add(item);
            return self;
        }
        
        public static T TopItems<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.SwipeItems>, IPropertyBuilder<Microsoft.Maui.Controls.SwipeItems>> configure)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.TopItemsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T BottomItems<T>(this T self,
            IList<Microsoft.Maui.Controls.ISwipeItem> bottomItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in bottomItems)
                self.BottomItems.Add(item);
            return self;
        }

        public static T BottomItems<T>(this T self,
            params Microsoft.Maui.Controls.ISwipeItem[] bottomItems)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            foreach (var item in bottomItems)
                self.BottomItems.Add(item);
            return self;
        }
        
        public static T BottomItems<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.SwipeItems>, IPropertyBuilder<Microsoft.Maui.Controls.SwipeItems>> configure)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.BottomItemsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnSwipeStarted<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SwipeStartedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeStarted += handler;
            return self;
        }
        
        public static T OnSwipeStarted<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeStarted += (o, arg) => action(self);
            return self;
        }
        
        public static T OnSwipeChanging<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SwipeChangingEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeChanging += handler;
            return self;
        }
        
        public static T OnSwipeChanging<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeChanging += (o, arg) => action(self);
            return self;
        }
        
        public static T OnSwipeEnded<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SwipeEndedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeEnded += handler;
            return self;
        }
        
        public static T OnSwipeEnded<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.SwipeEnded += (o, arg) => action(self);
            return self;
        }
        
        public static T OnOpenRequested<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.OpenRequestedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.OpenRequested += handler;
            return self;
        }
        
        public static T OnOpenRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.OpenRequested += (o, arg) => action(self);
            return self;
        }
        
        public static T OnCloseRequested<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.CloseRequestedEventArgs> handler)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.CloseRequested += handler;
            return self;
        }
        
        public static T OnCloseRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.SwipeView
        {
            self.CloseRequested += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
