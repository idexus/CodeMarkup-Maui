//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class ViewExtension
    {
        public static T GestureRecognizers<T>(this T self,
            IList<Microsoft.Maui.Controls.IGestureRecognizer> gestureRecognizers)
            where T : Microsoft.Maui.Controls.View
        {
            foreach (var item in gestureRecognizers)
                self.GestureRecognizers.Add(item);
            return self;
        }

        public static T GestureRecognizers<T>(this T self,
            params Microsoft.Maui.Controls.IGestureRecognizer[] gestureRecognizers)
            where T : Microsoft.Maui.Controls.View
        {
            foreach (var item in gestureRecognizers)
                self.GestureRecognizers.Add(item);
            return self;
        }
        
        public static T HorizontalOptions<T>(this T self,
            Microsoft.Maui.Controls.LayoutOptions horizontalOptions)
            where T : Microsoft.Maui.Controls.View
        {
            self.SetValue(Microsoft.Maui.Controls.View.HorizontalOptionsProperty, horizontalOptions);
            return self;
        }
        
        public static T HorizontalOptions<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.LayoutOptions>, IPropertyBuilder<Microsoft.Maui.Controls.LayoutOptions>> configure)
            where T : Microsoft.Maui.Controls.View
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.LayoutOptions>(self, Microsoft.Maui.Controls.View.HorizontalOptionsProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> HorizontalOptions<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.LayoutOptions horizontalOptions)
            where T : Microsoft.Maui.Controls.View
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.View.HorizontalOptionsProperty, Value = horizontalOptions });
            return self;
        }
        
        public static SettersContext<T> HorizontalOptions<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.LayoutOptions>, IPropertySettersBuilder<Microsoft.Maui.Controls.LayoutOptions>> configure)
            where T : Microsoft.Maui.Controls.View
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.LayoutOptions>(self.XamlSetters, Microsoft.Maui.Controls.View.HorizontalOptionsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Margin<T>(this T self,
            Microsoft.Maui.Thickness margin)
            where T : Microsoft.Maui.Controls.View
        {
            self.SetValue(Microsoft.Maui.Controls.View.MarginProperty, margin);
            return self;
        }
        
        public static T Margin<T>(this T self, Func<PropertyContext<Microsoft.Maui.Thickness>, IPropertyBuilder<Microsoft.Maui.Thickness>> configure)
            where T : Microsoft.Maui.Controls.View
        {
            var context = new PropertyContext<Microsoft.Maui.Thickness>(self, Microsoft.Maui.Controls.View.MarginProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> Margin<T>(this SettersContext<T> self,
            Microsoft.Maui.Thickness margin)
            where T : Microsoft.Maui.Controls.View
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.View.MarginProperty, Value = margin });
            return self;
        }
        
        public static SettersContext<T> Margin<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Thickness>, IPropertySettersBuilder<Microsoft.Maui.Thickness>> configure)
            where T : Microsoft.Maui.Controls.View
        {
            var context = new PropertySettersContext<Microsoft.Maui.Thickness>(self.XamlSetters, Microsoft.Maui.Controls.View.MarginProperty);
            configure(context).Build();
            return self;
        }
        
        public static T VerticalOptions<T>(this T self,
            Microsoft.Maui.Controls.LayoutOptions verticalOptions)
            where T : Microsoft.Maui.Controls.View
        {
            self.SetValue(Microsoft.Maui.Controls.View.VerticalOptionsProperty, verticalOptions);
            return self;
        }
        
        public static T VerticalOptions<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.LayoutOptions>, IPropertyBuilder<Microsoft.Maui.Controls.LayoutOptions>> configure)
            where T : Microsoft.Maui.Controls.View
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.LayoutOptions>(self, Microsoft.Maui.Controls.View.VerticalOptionsProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> VerticalOptions<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.LayoutOptions verticalOptions)
            where T : Microsoft.Maui.Controls.View
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.View.VerticalOptionsProperty, Value = verticalOptions });
            return self;
        }
        
        public static SettersContext<T> VerticalOptions<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.LayoutOptions>, IPropertySettersBuilder<Microsoft.Maui.Controls.LayoutOptions>> configure)
            where T : Microsoft.Maui.Controls.View
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.LayoutOptions>(self.XamlSetters, Microsoft.Maui.Controls.View.VerticalOptionsProperty);
            configure(context).Build();
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
