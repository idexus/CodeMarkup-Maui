//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class GridExtension
    {
        public static T ColumnDefinitions<T>(this T self,
            IList<Microsoft.Maui.Controls.ColumnDefinition> columnDefinitions)
            where T : Microsoft.Maui.Controls.Grid
        {
            foreach (var item in columnDefinitions)
                self.ColumnDefinitions.Add(item);
            return self;
        }

        public static T ColumnDefinitions<T>(this T self,
            params Microsoft.Maui.Controls.ColumnDefinition[] columnDefinitions)
            where T : Microsoft.Maui.Controls.Grid
        {
            foreach (var item in columnDefinitions)
                self.ColumnDefinitions.Add(item);
            return self;
        }
        
        public static T ColumnDefinitions<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.ColumnDefinitionCollection>, IPropertyBuilder<Microsoft.Maui.Controls.ColumnDefinitionCollection>> configure)
            where T : Microsoft.Maui.Controls.Grid
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.ColumnDefinitionCollection>(self, Microsoft.Maui.Controls.Grid.ColumnDefinitionsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T RowDefinitions<T>(this T self,
            IList<Microsoft.Maui.Controls.RowDefinition> rowDefinitions)
            where T : Microsoft.Maui.Controls.Grid
        {
            foreach (var item in rowDefinitions)
                self.RowDefinitions.Add(item);
            return self;
        }

        public static T RowDefinitions<T>(this T self,
            params Microsoft.Maui.Controls.RowDefinition[] rowDefinitions)
            where T : Microsoft.Maui.Controls.Grid
        {
            foreach (var item in rowDefinitions)
                self.RowDefinitions.Add(item);
            return self;
        }
        
        public static T RowDefinitions<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.RowDefinitionCollection>, IPropertyBuilder<Microsoft.Maui.Controls.RowDefinitionCollection>> configure)
            where T : Microsoft.Maui.Controls.Grid
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.RowDefinitionCollection>(self, Microsoft.Maui.Controls.Grid.RowDefinitionsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T RowSpacing<T>(this T self,
            double rowSpacing)
            where T : Microsoft.Maui.Controls.Grid
        {
            self.SetValue(Microsoft.Maui.Controls.Grid.RowSpacingProperty, rowSpacing);
            return self;
        }
        
        public static T RowSpacing<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Grid
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.Grid.RowSpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> RowSpacing<T>(this SettersContext<T> self,
            double rowSpacing)
            where T : Microsoft.Maui.Controls.Grid
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Grid.RowSpacingProperty, Value = rowSpacing });
            return self;
        }
        
        public static SettersContext<T> RowSpacing<T>(this SettersContext<T> self, Func<PropertySettersContext<double>, IPropertySettersBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Grid
        {
            var context = new PropertySettersContext<double>(self.XamlSetters, Microsoft.Maui.Controls.Grid.RowSpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateRowSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Grid
        {
            double fromValue = self.RowSpacing;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.RowSpacing = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateRowSpacingTo", transform, callback, length, easing);
        }
        
        public static T ColumnSpacing<T>(this T self,
            double columnSpacing)
            where T : Microsoft.Maui.Controls.Grid
        {
            self.SetValue(Microsoft.Maui.Controls.Grid.ColumnSpacingProperty, columnSpacing);
            return self;
        }
        
        public static T ColumnSpacing<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Grid
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.Grid.ColumnSpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> ColumnSpacing<T>(this SettersContext<T> self,
            double columnSpacing)
            where T : Microsoft.Maui.Controls.Grid
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Grid.ColumnSpacingProperty, Value = columnSpacing });
            return self;
        }
        
        public static SettersContext<T> ColumnSpacing<T>(this SettersContext<T> self, Func<PropertySettersContext<double>, IPropertySettersBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Grid
        {
            var context = new PropertySettersContext<double>(self.XamlSetters, Microsoft.Maui.Controls.Grid.ColumnSpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateColumnSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Grid
        {
            double fromValue = self.ColumnSpacing;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.ColumnSpacing = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateColumnSpacingTo", transform, callback, length, easing);
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
