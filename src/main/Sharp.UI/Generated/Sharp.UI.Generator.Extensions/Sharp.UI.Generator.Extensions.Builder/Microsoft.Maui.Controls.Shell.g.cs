//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class ShellExtension
    {
        public static T FlyoutVerticalScrollMode<T>(this T self,
            Microsoft.Maui.Controls.ScrollMode flyoutVerticalScrollMode)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty, flyoutVerticalScrollMode);
            return self;
        }
        
        public static T FlyoutVerticalScrollMode<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.ScrollMode>, IPropertyBuilder<Microsoft.Maui.Controls.ScrollMode>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.ScrollMode>(self, Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutVerticalScrollMode<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.ScrollMode flyoutVerticalScrollMode)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty, Value = flyoutVerticalScrollMode });
            return self;
        }
        
        public static SettersContext<T> FlyoutVerticalScrollMode<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.ScrollMode>, IPropertySettersBuilder<Microsoft.Maui.Controls.ScrollMode>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.ScrollMode>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutVerticalScrollModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutIcon<T>(this T self,
            Microsoft.Maui.Controls.ImageSource flyoutIcon)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutIconProperty, flyoutIcon);
            return self;
        }
        
        public static T FlyoutIcon<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.ImageSource>, IPropertyBuilder<Microsoft.Maui.Controls.ImageSource>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.Shell.FlyoutIconProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutIcon<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.ImageSource flyoutIcon)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutIconProperty, Value = flyoutIcon });
            return self;
        }
        
        public static SettersContext<T> FlyoutIcon<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.ImageSource>, IPropertySettersBuilder<Microsoft.Maui.Controls.ImageSource>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.ImageSource>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutIconProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CurrentItem<T>(this T self,
            Microsoft.Maui.Controls.ShellItem currentItem)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.CurrentItemProperty, currentItem);
            return self;
        }
        
        public static T CurrentItem<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.ShellItem>, IPropertyBuilder<Microsoft.Maui.Controls.ShellItem>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.ShellItem>(self, Microsoft.Maui.Controls.Shell.CurrentItemProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> CurrentItem<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.ShellItem currentItem)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.CurrentItemProperty, Value = currentItem });
            return self;
        }
        
        public static SettersContext<T> CurrentItem<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.ShellItem>, IPropertySettersBuilder<Microsoft.Maui.Controls.ShellItem>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.ShellItem>(self.XamlSetters, Microsoft.Maui.Controls.Shell.CurrentItemProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutBackgroundImage<T>(this T self,
            Microsoft.Maui.Controls.ImageSource flyoutBackgroundImage)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, flyoutBackgroundImage);
            return self;
        }
        
        public static T FlyoutBackgroundImage<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.ImageSource>, IPropertyBuilder<Microsoft.Maui.Controls.ImageSource>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutBackgroundImage<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.ImageSource flyoutBackgroundImage)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty, Value = flyoutBackgroundImage });
            return self;
        }
        
        public static SettersContext<T> FlyoutBackgroundImage<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.ImageSource>, IPropertySettersBuilder<Microsoft.Maui.Controls.ImageSource>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.ImageSource>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutBackgroundImageAspect<T>(this T self,
            Microsoft.Maui.Aspect flyoutBackgroundImageAspect)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty, flyoutBackgroundImageAspect);
            return self;
        }
        
        public static T FlyoutBackgroundImageAspect<T>(this T self, Func<PropertyContext<Microsoft.Maui.Aspect>, IPropertyBuilder<Microsoft.Maui.Aspect>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Aspect>(self, Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutBackgroundImageAspect<T>(this SettersContext<T> self,
            Microsoft.Maui.Aspect flyoutBackgroundImageAspect)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty, Value = flyoutBackgroundImageAspect });
            return self;
        }
        
        public static SettersContext<T> FlyoutBackgroundImageAspect<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Aspect>, IPropertySettersBuilder<Microsoft.Maui.Aspect>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Aspect>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutBackgroundImageAspectProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutBackgroundColor<T>(this T self,
            Microsoft.Maui.Graphics.Color flyoutBackgroundColor)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty, flyoutBackgroundColor);
            return self;
        }
        
        public static T FlyoutBackgroundColor<T>(this T self, Func<PropertyContext<Microsoft.Maui.Graphics.Color>, IPropertyBuilder<Microsoft.Maui.Graphics.Color>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutBackgroundColor<T>(this SettersContext<T> self,
            Microsoft.Maui.Graphics.Color flyoutBackgroundColor)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty, Value = flyoutBackgroundColor });
            return self;
        }
        
        public static SettersContext<T> FlyoutBackgroundColor<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<Microsoft.Maui.Graphics.Color>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutBackgroundColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateFlyoutBackgroundColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Shell
        {
            Microsoft.Maui.Graphics.Color fromValue = self.FlyoutBackgroundColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.FlyoutBackgroundColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateFlyoutBackgroundColorTo", transform, callback, length, easing);
        }
        
        public static T FlyoutBackground<T>(this T self,
            Microsoft.Maui.Controls.Brush flyoutBackground)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty, flyoutBackground);
            return self;
        }
        
        public static T FlyoutBackground<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.Brush>, IPropertyBuilder<Microsoft.Maui.Controls.Brush>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.Brush>(self, Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutBackground<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.Brush flyoutBackground)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty, Value = flyoutBackground });
            return self;
        }
        
        public static SettersContext<T> FlyoutBackground<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.Brush>, IPropertySettersBuilder<Microsoft.Maui.Controls.Brush>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.Brush>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutBackgroundProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutBackdrop<T>(this T self,
            Microsoft.Maui.Controls.Brush flyoutBackdrop)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty, flyoutBackdrop);
            return self;
        }
        
        public static T FlyoutBackdrop<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.Brush>, IPropertyBuilder<Microsoft.Maui.Controls.Brush>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.Brush>(self, Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutBackdrop<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.Brush flyoutBackdrop)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty, Value = flyoutBackdrop });
            return self;
        }
        
        public static SettersContext<T> FlyoutBackdrop<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.Brush>, IPropertySettersBuilder<Microsoft.Maui.Controls.Brush>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.Brush>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutBackdropProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutWidth<T>(this T self,
            double flyoutWidth)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutWidthProperty, flyoutWidth);
            return self;
        }
        
        public static T FlyoutWidth<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.Shell.FlyoutWidthProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutWidth<T>(this SettersContext<T> self,
            double flyoutWidth)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutWidthProperty, Value = flyoutWidth });
            return self;
        }
        
        public static SettersContext<T> FlyoutWidth<T>(this SettersContext<T> self, Func<PropertySettersContext<double>, IPropertySettersBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<double>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutWidthProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateFlyoutWidthTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Shell
        {
            double fromValue = self.FlyoutWidth;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.FlyoutWidth = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateFlyoutWidthTo", transform, callback, length, easing);
        }
        
        public static T FlyoutHeight<T>(this T self,
            double flyoutHeight)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutHeightProperty, flyoutHeight);
            return self;
        }
        
        public static T FlyoutHeight<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.Shell.FlyoutHeightProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutHeight<T>(this SettersContext<T> self,
            double flyoutHeight)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutHeightProperty, Value = flyoutHeight });
            return self;
        }
        
        public static SettersContext<T> FlyoutHeight<T>(this SettersContext<T> self, Func<PropertySettersContext<double>, IPropertySettersBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<double>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutHeightProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateFlyoutHeightTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.Shell
        {
            double fromValue = self.FlyoutHeight;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.FlyoutHeight = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateFlyoutHeightTo", transform, callback, length, easing);
        }
        
        public static T FlyoutBehavior<T>(this T self,
            Microsoft.Maui.FlyoutBehavior flyoutBehavior)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty, flyoutBehavior);
            return self;
        }
        
        public static T FlyoutBehavior<T>(this T self, Func<PropertyContext<Microsoft.Maui.FlyoutBehavior>, IPropertyBuilder<Microsoft.Maui.FlyoutBehavior>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.FlyoutBehavior>(self, Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutBehavior<T>(this SettersContext<T> self,
            Microsoft.Maui.FlyoutBehavior flyoutBehavior)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty, Value = flyoutBehavior });
            return self;
        }
        
        public static SettersContext<T> FlyoutBehavior<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.FlyoutBehavior>, IPropertySettersBuilder<Microsoft.Maui.FlyoutBehavior>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.FlyoutBehavior>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutBehaviorProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutHeader<T>(this T self,
            object flyoutHeader)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutHeaderProperty, flyoutHeader);
            return self;
        }
        
        public static T FlyoutHeader<T>(this T self, Func<PropertyContext<object>, IPropertyBuilder<object>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<object>(self, Microsoft.Maui.Controls.Shell.FlyoutHeaderProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutHeader<T>(this SettersContext<T> self,
            object flyoutHeader)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutHeaderProperty, Value = flyoutHeader });
            return self;
        }
        
        public static SettersContext<T> FlyoutHeader<T>(this SettersContext<T> self, Func<PropertySettersContext<object>, IPropertySettersBuilder<object>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<object>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutHeaderProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutFooter<T>(this T self,
            object flyoutFooter)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutFooterProperty, flyoutFooter);
            return self;
        }
        
        public static T FlyoutFooter<T>(this T self, Func<PropertyContext<object>, IPropertyBuilder<object>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<object>(self, Microsoft.Maui.Controls.Shell.FlyoutFooterProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutFooter<T>(this SettersContext<T> self,
            object flyoutFooter)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutFooterProperty, Value = flyoutFooter });
            return self;
        }
        
        public static SettersContext<T> FlyoutFooter<T>(this SettersContext<T> self, Func<PropertySettersContext<object>, IPropertySettersBuilder<object>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<object>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutFooterProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutHeaderBehavior<T>(this T self,
            Microsoft.Maui.Controls.FlyoutHeaderBehavior flyoutHeaderBehavior)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty, flyoutHeaderBehavior);
            return self;
        }
        
        public static T FlyoutHeaderBehavior<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.FlyoutHeaderBehavior>, IPropertyBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.FlyoutHeaderBehavior>(self, Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutHeaderBehavior<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.FlyoutHeaderBehavior flyoutHeaderBehavior)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty, Value = flyoutHeaderBehavior });
            return self;
        }
        
        public static SettersContext<T> FlyoutHeaderBehavior<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.FlyoutHeaderBehavior>, IPropertySettersBuilder<Microsoft.Maui.Controls.FlyoutHeaderBehavior>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.FlyoutHeaderBehavior>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutHeaderBehaviorProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate flyoutHeaderTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty, flyoutHeaderTemplate);
            return self;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutHeaderTemplate<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.DataTemplate flyoutHeaderTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty, Value = flyoutHeaderTemplate });
            return self;
        }
        
        public static SettersContext<T> FlyoutHeaderTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutHeaderTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutHeaderTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T FlyoutFooterTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate flyoutFooterTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty, flyoutFooterTemplate);
            return self;
        }
        
        public static T FlyoutFooterTemplate<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutFooterTemplate<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.DataTemplate flyoutFooterTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty, Value = flyoutFooterTemplate });
            return self;
        }
        
        public static SettersContext<T> FlyoutFooterTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutFooterTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutFooterTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T FlyoutIsPresented<T>(this T self,
            bool flyoutIsPresented)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty, flyoutIsPresented);
            return self;
        }
        
        public static T FlyoutIsPresented<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutIsPresented<T>(this SettersContext<T> self,
            bool flyoutIsPresented)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty, Value = flyoutIsPresented });
            return self;
        }
        
        public static SettersContext<T> FlyoutIsPresented<T>(this SettersContext<T> self, Func<PropertySettersContext<bool>, IPropertySettersBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<bool>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutIsPresentedProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Items<T>(this T self,
            IList<Microsoft.Maui.Controls.ShellItem> items)
            where T : Microsoft.Maui.Controls.Shell
        {
            foreach (var item in items)
                self.Items.Add(item);
            return self;
        }

        public static T Items<T>(this T self,
            params Microsoft.Maui.Controls.ShellItem[] items)
            where T : Microsoft.Maui.Controls.Shell
        {
            foreach (var item in items)
                self.Items.Add(item);
            return self;
        }
        
        public static T Items<T>(this T self, Func<PropertyContext<System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem>>, IPropertyBuilder<System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem>>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<System.Collections.Generic.IList<Microsoft.Maui.Controls.ShellItem>>(self, Microsoft.Maui.Controls.Shell.ItemsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T ItemTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate itemTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, itemTemplate);
            return self;
        }
        
        public static T ItemTemplate<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.ItemTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> ItemTemplate<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.DataTemplate itemTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.ItemTemplateProperty, Value = itemTemplate });
            return self;
        }
        
        public static SettersContext<T> ItemTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.Shell.ItemTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static T ItemTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.ItemTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T MenuItemTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate menuItemTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty, menuItemTemplate);
            return self;
        }
        
        public static T MenuItemTemplate<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> MenuItemTemplate<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.DataTemplate menuItemTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty, Value = menuItemTemplate });
            return self;
        }
        
        public static SettersContext<T> MenuItemTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static T MenuItemTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.MenuItemTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T FlyoutContent<T>(this T self,
            object flyoutContent)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutContentProperty, flyoutContent);
            return self;
        }
        
        public static T FlyoutContent<T>(this T self, Func<PropertyContext<object>, IPropertyBuilder<object>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<object>(self, Microsoft.Maui.Controls.Shell.FlyoutContentProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutContent<T>(this SettersContext<T> self,
            object flyoutContent)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutContentProperty, Value = flyoutContent });
            return self;
        }
        
        public static SettersContext<T> FlyoutContent<T>(this SettersContext<T> self, Func<PropertySettersContext<object>, IPropertySettersBuilder<object>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<object>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutContentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutContentTemplate<T>(this T self,
            Microsoft.Maui.Controls.DataTemplate flyoutContentTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty, flyoutContentTemplate);
            return self;
        }
        
        public static T FlyoutContentTemplate<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> FlyoutContentTemplate<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.DataTemplate flyoutContentTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty, Value = flyoutContentTemplate });
            return self;
        }
        
        public static SettersContext<T> FlyoutContentTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<Microsoft.Maui.Controls.DataTemplate>> configure)
            where T : Microsoft.Maui.Controls.Shell
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlyoutContentTemplate<T>(this T self, System.Func<object> loadTemplate)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.SetValue(Microsoft.Maui.Controls.Shell.FlyoutContentTemplateProperty, new DataTemplate(loadTemplate));
            return self;
        }
        
        public static T OnNavigated<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ShellNavigatedEventArgs> handler)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.Navigated += handler;
            return self;
        }
        
        public static T OnNavigated<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.Navigated += (o, arg) => action(self);
            return self;
        }
        
        public static T OnNavigating<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ShellNavigatingEventArgs> handler)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.Navigating += handler;
            return self;
        }
        
        public static T OnNavigating<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.Shell
        {
            self.Navigating += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
