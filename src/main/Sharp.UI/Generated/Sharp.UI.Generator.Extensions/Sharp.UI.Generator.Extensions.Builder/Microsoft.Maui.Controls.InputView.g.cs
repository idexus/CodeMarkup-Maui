//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class InputViewExtension
    {
        public static T MaxLength<T>(this T self,
            int maxLength)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.MaxLengthProperty, maxLength);
            return self;
        }
        
        public static T MaxLength<T>(this T self, Func<PropertyContext<int>, IPropertyBuilder<int>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<int>(self, Microsoft.Maui.Controls.InputView.MaxLengthProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> MaxLength<T>(this SettersContext<T> self,
            int maxLength)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.MaxLengthProperty, Value = maxLength });
            return self;
        }
        
        public static SettersContext<T> MaxLength<T>(this SettersContext<T> self, Func<PropertySettersContext<int>, IPropertySettersBuilder<int>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<int>(self.XamlSetters, Microsoft.Maui.Controls.InputView.MaxLengthProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Text<T>(this T self,
            string text)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.TextProperty, text);
            return self;
        }
        
        public static T Text<T>(this T self, Func<PropertyContext<string>, IPropertyBuilder<string>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<string>(self, Microsoft.Maui.Controls.InputView.TextProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> Text<T>(this SettersContext<T> self,
            string text)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.TextProperty, Value = text });
            return self;
        }
        
        public static SettersContext<T> Text<T>(this SettersContext<T> self, Func<PropertySettersContext<string>, IPropertySettersBuilder<string>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<string>(self.XamlSetters, Microsoft.Maui.Controls.InputView.TextProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Keyboard<T>(this T self,
            Microsoft.Maui.Keyboard keyboard)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.KeyboardProperty, keyboard);
            return self;
        }
        
        public static T Keyboard<T>(this T self, Func<PropertyContext<Microsoft.Maui.Keyboard>, IPropertyBuilder<Microsoft.Maui.Keyboard>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<Microsoft.Maui.Keyboard>(self, Microsoft.Maui.Controls.InputView.KeyboardProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> Keyboard<T>(this SettersContext<T> self,
            Microsoft.Maui.Keyboard keyboard)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.KeyboardProperty, Value = keyboard });
            return self;
        }
        
        public static SettersContext<T> Keyboard<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Keyboard>, IPropertySettersBuilder<Microsoft.Maui.Keyboard>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<Microsoft.Maui.Keyboard>(self.XamlSetters, Microsoft.Maui.Controls.InputView.KeyboardProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsSpellCheckEnabled<T>(this T self,
            bool isSpellCheckEnabled)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty, isSpellCheckEnabled);
            return self;
        }
        
        public static T IsSpellCheckEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> IsSpellCheckEnabled<T>(this SettersContext<T> self,
            bool isSpellCheckEnabled)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty, Value = isSpellCheckEnabled });
            return self;
        }
        
        public static SettersContext<T> IsSpellCheckEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<bool>, IPropertySettersBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<bool>(self.XamlSetters, Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsReadOnly<T>(this T self,
            bool isReadOnly)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.IsReadOnlyProperty, isReadOnly);
            return self;
        }
        
        public static T IsReadOnly<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<bool>(self, Microsoft.Maui.Controls.InputView.IsReadOnlyProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> IsReadOnly<T>(this SettersContext<T> self,
            bool isReadOnly)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.IsReadOnlyProperty, Value = isReadOnly });
            return self;
        }
        
        public static SettersContext<T> IsReadOnly<T>(this SettersContext<T> self, Func<PropertySettersContext<bool>, IPropertySettersBuilder<bool>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<bool>(self.XamlSetters, Microsoft.Maui.Controls.InputView.IsReadOnlyProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Placeholder<T>(this T self,
            string placeholder)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.PlaceholderProperty, placeholder);
            return self;
        }
        
        public static T Placeholder<T>(this T self, Func<PropertyContext<string>, IPropertyBuilder<string>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<string>(self, Microsoft.Maui.Controls.InputView.PlaceholderProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> Placeholder<T>(this SettersContext<T> self,
            string placeholder)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.PlaceholderProperty, Value = placeholder });
            return self;
        }
        
        public static SettersContext<T> Placeholder<T>(this SettersContext<T> self, Func<PropertySettersContext<string>, IPropertySettersBuilder<string>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<string>(self.XamlSetters, Microsoft.Maui.Controls.InputView.PlaceholderProperty);
            configure(context).Build();
            return self;
        }
        
        public static T PlaceholderColor<T>(this T self,
            Microsoft.Maui.Graphics.Color placeholderColor)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.PlaceholderColorProperty, placeholderColor);
            return self;
        }
        
        public static T PlaceholderColor<T>(this T self, Func<PropertyContext<Microsoft.Maui.Graphics.Color>, IPropertyBuilder<Microsoft.Maui.Graphics.Color>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.InputView.PlaceholderColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> PlaceholderColor<T>(this SettersContext<T> self,
            Microsoft.Maui.Graphics.Color placeholderColor)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.PlaceholderColorProperty, Value = placeholderColor });
            return self;
        }
        
        public static SettersContext<T> PlaceholderColor<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<Microsoft.Maui.Graphics.Color>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.InputView.PlaceholderColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimatePlaceholderColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.InputView
        {
            Microsoft.Maui.Graphics.Color fromValue = self.PlaceholderColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.PlaceholderColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimatePlaceholderColorTo", transform, callback, length, easing);
        }
        
        public static T TextColor<T>(this T self,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.TextColorProperty, textColor);
            return self;
        }
        
        public static T TextColor<T>(this T self, Func<PropertyContext<Microsoft.Maui.Graphics.Color>, IPropertyBuilder<Microsoft.Maui.Graphics.Color>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.InputView.TextColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> TextColor<T>(this SettersContext<T> self,
            Microsoft.Maui.Graphics.Color textColor)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.TextColorProperty, Value = textColor });
            return self;
        }
        
        public static SettersContext<T> TextColor<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<Microsoft.Maui.Graphics.Color>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.InputView.TextColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateTextColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.InputView
        {
            Microsoft.Maui.Graphics.Color fromValue = self.TextColor;
            var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
            var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.TextColor = actValue; };
            return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateTextColorTo", transform, callback, length, easing);
        }
        
        public static T CharacterSpacing<T>(this T self,
            double characterSpacing)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.CharacterSpacingProperty, characterSpacing);
            return self;
        }
        
        public static T CharacterSpacing<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<double>(self, Microsoft.Maui.Controls.InputView.CharacterSpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> CharacterSpacing<T>(this SettersContext<T> self,
            double characterSpacing)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.CharacterSpacingProperty, Value = characterSpacing });
            return self;
        }
        
        public static SettersContext<T> CharacterSpacing<T>(this SettersContext<T> self, Func<PropertySettersContext<double>, IPropertySettersBuilder<double>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<double>(self.XamlSetters, Microsoft.Maui.Controls.InputView.CharacterSpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static Task<bool> AnimateCharacterSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
            where T : Microsoft.Maui.Controls.InputView
        {
            double fromValue = self.CharacterSpacing;
            var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
            var callback = (double actValue) => { self.CharacterSpacing = actValue; };
            return Transformations.AnimateAsync<double>(self, "AnimateCharacterSpacingTo", transform, callback, length, easing);
        }
        
        public static T TextTransform<T>(this T self,
            Microsoft.Maui.TextTransform textTransform)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.SetValue(Microsoft.Maui.Controls.InputView.TextTransformProperty, textTransform);
            return self;
        }
        
        public static T TextTransform<T>(this T self, Func<PropertyContext<Microsoft.Maui.TextTransform>, IPropertyBuilder<Microsoft.Maui.TextTransform>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertyContext<Microsoft.Maui.TextTransform>(self, Microsoft.Maui.Controls.InputView.TextTransformProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> TextTransform<T>(this SettersContext<T> self,
            Microsoft.Maui.TextTransform textTransform)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.TextTransformProperty, Value = textTransform });
            return self;
        }
        
        public static SettersContext<T> TextTransform<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.TextTransform>, IPropertySettersBuilder<Microsoft.Maui.TextTransform>> configure)
            where T : Microsoft.Maui.Controls.InputView
        {
            var context = new PropertySettersContext<Microsoft.Maui.TextTransform>(self.XamlSetters, Microsoft.Maui.Controls.InputView.TextTransformProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnTextChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.TextChangedEventArgs> handler)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.TextChanged += handler;
            return self;
        }
        
        public static T OnTextChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.InputView
        {
            self.TextChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
