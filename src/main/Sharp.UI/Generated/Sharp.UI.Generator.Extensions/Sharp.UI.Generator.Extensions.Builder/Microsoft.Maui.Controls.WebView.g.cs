//
// <auto-generated> Sharp.UI.Generator.Extensions.Builder
//

#nullable enable
#pragma warning disable CS8601


namespace Sharp.UI
{
    using Sharp.UI.Internal;
    
    public static partial class WebViewExtension
    {
        public static T Cookies<T>(this T self,
            System.Net.CookieContainer cookies)
            where T : Microsoft.Maui.Controls.WebView
        {
            self.SetValue(Microsoft.Maui.Controls.WebView.CookiesProperty, cookies);
            return self;
        }
        
        public static T Cookies<T>(this T self, Func<PropertyContext<System.Net.CookieContainer>, IPropertyBuilder<System.Net.CookieContainer>> configure)
            where T : Microsoft.Maui.Controls.WebView
        {
            var context = new PropertyContext<System.Net.CookieContainer>(self, Microsoft.Maui.Controls.WebView.CookiesProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> Cookies<T>(this SettersContext<T> self,
            System.Net.CookieContainer cookies)
            where T : Microsoft.Maui.Controls.WebView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.WebView.CookiesProperty, Value = cookies });
            return self;
        }
        
        public static SettersContext<T> Cookies<T>(this SettersContext<T> self, Func<PropertySettersContext<System.Net.CookieContainer>, IPropertySettersBuilder<System.Net.CookieContainer>> configure)
            where T : Microsoft.Maui.Controls.WebView
        {
            var context = new PropertySettersContext<System.Net.CookieContainer>(self.XamlSetters, Microsoft.Maui.Controls.WebView.CookiesProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Source<T>(this T self,
            Microsoft.Maui.Controls.WebViewSource source)
            where T : Microsoft.Maui.Controls.WebView
        {
            self.SetValue(Microsoft.Maui.Controls.WebView.SourceProperty, source);
            return self;
        }
        
        public static T Source<T>(this T self, Func<PropertyContext<Microsoft.Maui.Controls.WebViewSource>, IPropertyBuilder<Microsoft.Maui.Controls.WebViewSource>> configure)
            where T : Microsoft.Maui.Controls.WebView
        {
            var context = new PropertyContext<Microsoft.Maui.Controls.WebViewSource>(self, Microsoft.Maui.Controls.WebView.SourceProperty);
            configure(context).Build();
            return self;
        }
        
        public static SettersContext<T> Source<T>(this SettersContext<T> self,
            Microsoft.Maui.Controls.WebViewSource source)
            where T : Microsoft.Maui.Controls.WebView
        {
            self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.WebView.SourceProperty, Value = source });
            return self;
        }
        
        public static SettersContext<T> Source<T>(this SettersContext<T> self, Func<PropertySettersContext<Microsoft.Maui.Controls.WebViewSource>, IPropertySettersBuilder<Microsoft.Maui.Controls.WebViewSource>> configure)
            where T : Microsoft.Maui.Controls.WebView
        {
            var context = new PropertySettersContext<Microsoft.Maui.Controls.WebViewSource>(self.XamlSetters, Microsoft.Maui.Controls.WebView.SourceProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnNavigated<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.WebNavigatedEventArgs> handler)
            where T : Microsoft.Maui.Controls.WebView
        {
            self.Navigated += handler;
            return self;
        }
        
        public static T OnNavigated<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.WebView
        {
            self.Navigated += (o, arg) => action(self);
            return self;
        }
        
        public static T OnNavigating<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.WebNavigatingEventArgs> handler)
            where T : Microsoft.Maui.Controls.WebView
        {
            self.Navigating += handler;
            return self;
        }
        
        public static T OnNavigating<T>(this T self, System.Action<T> action)
            where T : Microsoft.Maui.Controls.WebView
        {
            self.Navigating += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
