//
// MIT License
// Copyright Pawel Krzywdzinski
//

using System;
using Microsoft.CodeAnalysis;
using System.Text;
using System.Linq;

namespace Sharp.UI.Generator.Classes
{
    public partial class ClassGenerator
    {

        GeneratorExecutionContext context;
        INamedTypeSymbol mainSymbol;

        StringBuilder builder;

        string fullSymbolName = null;
        string contentPropertyName = null;
        bool isSingleItemContainer = false;
        string containerOfTypeName = null;
        bool isNewPropertyContainer = false;
        bool isAlreadyContainerOfThis = false;

        public ClassGenerator(GeneratorExecutionContext context, INamedTypeSymbol symbol)
        {
            this.context = context;
            this.mainSymbol = symbol;

            this.fullSymbolName = symbol.ToDisplayString().Split('.').Last();

            SetupContainerIfNeeded();
        }

        void SetupContainerIfNeeded()
        {
            this.contentPropertyName = SharpAttributes.GetContentPropertyNameFor(mainSymbol);
            this.isNewPropertyContainer = SharpAttributes.IsNewPropertyContainer(mainSymbol);

            this.isAlreadyContainerOfThis = Helpers.IsGenericIList(mainSymbol, out var containerOfType);
            if (contentPropertyName != null && isAlreadyContainerOfThis) throw new ArgumentException($"Type {mainSymbol.ToDisplayString()} defines IList interface, you can not use ContentProperty attribute");

            if (isAlreadyContainerOfThis)
            {
                this.containerOfTypeName = containerOfType.ToDisplayString();
                this.contentPropertyName = "this";
                this.isSingleItemContainer = false;
            }
            else
            {
                if (!isNewPropertyContainer && mainSymbol.ContainingNamespace.ToDisplayString().Equals("Sharp.UI"))
                {
                    this.contentPropertyName = SharpAttributes.FindContentPropertyName(mainSymbol);
                }

                if (!string.IsNullOrEmpty(this.contentPropertyName))
                { 
                    var contentPropertySymbol = SharpAttributes.FindPropertySymbolWithName(mainSymbol, this.contentPropertyName);
                    if (contentPropertySymbol == null) throw new Exception($"No content property for: {mainSymbol.ToDisplayString()}");

                    var contentPropertyType = (INamedTypeSymbol)((contentPropertySymbol).Type);
                    if (Helpers.IsGenericIList(contentPropertyType, out var ofType))
                    {
                        this.containerOfTypeName = ofType.ToDisplayString();
                        this.isSingleItemContainer = false;
                    }
                    else
                    {
                        this.containerOfTypeName = contentPropertyType.ToDisplayString();
                        this.isSingleItemContainer = true;
                    }
                }
            }
        }

        public void Build()
        {
            builder = new StringBuilder();

            builder.AppendLine("//");
            builder.AppendLine("// <auto-generated> Sharp.UI.Generator.Classes.Builder");
            builder.AppendLine("//");
            builder.AppendLine();

            builder.AppendLine("#nullable enable");
            builder.AppendLine();

            GenerateClassNamespace();

            builder.AppendLine();
            builder.AppendLine("#nullable restore");

            context.AddSource($"{mainSymbol.ContainingNamespace.ToDisplayString()}.{Helpers.GetNormalizedFileName(mainSymbol)}.g.cs", builder.ToString());
        }
    }
}